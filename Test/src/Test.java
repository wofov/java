
public class Test {

	public static void main(String[] args) {
		/*
		 1.에디터 종류
		 -gedit 
		 -리눅스 대표적 편집기 vi, emacs, pico 
		 
		 -vim( vi Improved)
		 
		 -emacs 유닉스에서 가장 많이 사용된다고 함.
		 
		 2.database 종류
		 -계층형 데이터 베이스
		 폴더와 파일을 계층 구조로 데이터를 저장하는 방식
		 
		 -관계형 데이터 베이스
		 행과 열을 가지고 표 형식 데이터를 저장하는 형태
		 
		 -객체지향 데이터 베이스
		 객체 중심으로 프로그래밍 하는것
		 객체 그대로 데이터 베이스의 데이터로 저장 하는것
		 
		 -xml 데이터 베이스
		 태그를 이용해 마크업 문서를 작성할 수 있다 
		 XML 형식으로 기록된 데이터 베이스 
		 
		 -키 - 밸류 스토어(kvs)
		 단순한 형태의 데이터 베이스를 저장하는 방식
		 
		 //
		  oracle
		  DB2
		  SQL server
		  Postgre SQL
		  My SQL
		  SQLite
		  
		  5.자바의 특징
		  -높은 이식성
		  이식성이란? 서로 다른 실행 환경의 시스템 간에 프로그램을 옮겨 실행할 수 있는 것
		  윈도우에서 실행하는 프로그램이 리눅스에서도 실행할 수 있다면 이식성이 높다
		  
		  -객체 지향 언어
		  프로그램을 개발하는 기법. 부품에 해당하는 객체를 먼저 만들어 하나씩 조립해 전체 프로그램을 완성하는 기법이다
		  자바는 100% 객체지향 언어로, 처음부터 객체를 고려해 설계되었기 때문에 캡슐화, 상속, 다형성을 완벽하게 지원한다
		  
		  -함수형 스타일 코딩
		  대용량 데이터의 병렬 처리와 이벤트 지향 프로그래밍에 적합
		  람다식을 사용하면 필터링, 매핑, 집계 등의 처리가 쉽고 코드가 간결해진다는 장점이 존재한다.
		  
		  -Garbage Collector
		  자바는 메모리를 직접 관리한다
		  객체를 생성할 때 자동으로 메모리 영역을 찾아 할당하고, 
		  사용이 끝나면 Garbage Collector를 실행해 자동으로 사용하지 않는 객체를 제거해준다.
		  
		  -다양한 애플리케이션을 개발 가능
		  자바는 다양한 운영체제에서 실행되는 프로그램을 개발 할 수 있다
		  콘솔 프로그램, 서버용 웹 애플리케이션, 안드로이드 앱 등 모든 곳에서 실행되는 프로그램을 개발할 수 있다
		  
		  -멀티 스레드
		  하나의 프로그램이 동시에 여러 작업을 처리하거나 대용량 작업을 빠르게 처리하기 위해
		  자바는 스레드 생성 및 제어와 관련된 라이브러리 API를 제공하기 때문에 실행되는 운영체제와 
		  관련없이 멀티 스레드를 쉽게 구현 가능하다

          -동적 로딩
          애플리케이션이 실행될 때 모든 객체가 생성되지 않고, 객체가 필요한 시점에 클래스를 동적 로딩해 객체를 생성한다.
          
          -오픈소스 라이브러리
          자바는 오픈소스 언어기 때문에 자바에서 사용하는 라이브러리 또한 오픈소스가 많다

		 */

	}

}
